[
  {
    "instance_id": "django__django-15814",
    "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 33cc636b22..5036335bec 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -748,7 +748,7 @@ class Query(BaseExpression):\n                     cur_model = source.related_model\n                 else:\n                     cur_model = source.remote_field.model\n-                opts = cur_model._meta\n+                opts = cur_model._meta.concrete_model._meta\n                 # Even if we're \"just passing through\" this model, we must add\n                 # both the current model's pk and the related reference field\n                 # (if it's not a reverse relation) to the things we select.\n",
    "model_name_or_path": "claude-code"
  },
  {
    "instance_id": "sympy__sympy-11400",
    "model_patch": "diff --git a/sympy/printing/ccode.py b/sympy/printing/ccode.py\nindex 30a07a7b59..430ec0db93 100644\n--- a/sympy/printing/ccode.py\n+++ b/sympy/printing/ccode.py\n@@ -251,6 +251,13 @@ def _print_For(self, expr):\n     def _print_sign(self, func):\n         return '((({0}) > 0) - (({0}) < 0))'.format(self._print(func.args[0]))\n \n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise\n+        from sympy.core.relational import Ne\n+        x = expr.args[0]\n+        _piecewise = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(_piecewise)\n+\n     def indent_code(self, code):\n         \"\"\"Accepts a string of code or a list of code lines\"\"\"\n \n",
    "model_name_or_path": "claude-code"
  },
  {
    "instance_id": "astropy__astropy-12907",
    "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex a308e27297..45bea36085 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -242,7 +242,7 @@ def _cstack(left, right):\n         cright = _coord_matrix(right, 'right', noutp)\n     else:\n         cright = np.zeros((noutp, right.shape[1]))\n-        cright[-right.shape[0]:, -right.shape[1]:] = 1\n+        cright[-right.shape[0]:, -right.shape[1]:] = right\n \n     return np.hstack([cleft, cright])\n \ndiff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 8dfe5c8626..0686dd4504 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -148,3 +148,34 @@ def test_custom_model_separable():\n \n     assert not model_c().separable\n     assert np.all(separability_matrix(model_c()) == [True, True])\n+\n+\n+def test_nested_compound_model_separability():\n+    \"\"\"\n+    Test that nested compound models compute separability correctly.\n+    \n+    Regression test for issue where separability_matrix incorrectly\n+    computed the separability of nested compound models.\n+    \"\"\"\n+    # Create a simple compound model\n+    cm = models.Linear1D(10) & models.Linear1D(5)\n+    \n+    # Test its separability matrix - should be diagonal\n+    expected_cm = np.array([[True, False],\n+                           [False, True]])\n+    assert_allclose(separability_matrix(cm), expected_cm)\n+    \n+    # Create nested compound model\n+    nested_model = models.Pix2Sky_TAN() & cm\n+    \n+    # Expected separability matrix - outputs should remain independent\n+    expected_nested = np.array([[True, True, False, False],\n+                               [True, True, False, False],\n+                               [False, False, True, False],\n+                               [False, False, False, True]])\n+    \n+    assert_allclose(separability_matrix(nested_model), expected_nested)\n+    \n+    # Compare with non-nested version - should give same result\n+    non_nested = models.Pix2Sky_TAN() & models.Linear1D(10) & models.Linear1D(5)\n+    assert_allclose(separability_matrix(non_nested), expected_nested)\n",
    "model_name_or_path": "claude-code"
  }
]